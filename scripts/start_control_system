#!/bin/sh

# Script to launch the system for the control CPU

# Exit on error, rather than continuing.
set -e

cd $(dirname "$0")

# wait_for_ros : Waits for ROS to launch.
wait_for_ros () {
    while ! rosservice list > /dev/null 2>&1; do
        echo 'waiting for ROS'
        sleep 1
    done
}

# wait_and_call <ros_service> <params ...> : Waits for the ROS service
# to exist, then calls it, avoiding startup race conditions.
wait_and_call () {
    # ROS has to be initialized; wait for `rosservice` to successfully
    # connect.
    wait_for_ros

    # The service has to exist.
    while ! rosservice list | grep -q "^$1\$"; do
        echo 'waiting for service'
        sleep 1
    done

    # Now it's safe to call the service.
    rosservice call "$@"
}

# Start up ROS.
. ../ros/catkin_ws/devel/setup.sh
roscore &
wait_for_ros

# Start lidar
roslaunch rplidar_ros rplidar.launch --wait &

# Start camera
./start_camera &
sleep 10
rosrun david_cam camera_node /cameras/rear 5000 &
sleep 10
rosrun david_cam camera_img_service /cameras/rear &


# Start motor controller
rosrun david_motor david_motor "lol" /cmd_vel &

# Start pitch controller
rosrun david_pitch pitch &

# Start telemetry
# Start joint state publisher
roslaunch david_conf state_publisher.launch --wait

wait
